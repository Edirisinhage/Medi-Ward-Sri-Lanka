{"ast":null,"code":"import React, { useState } from 'react';\nexport const Validation = (username, password) => {\n  let error = {};\n  if (username == \"\") {\n    error.uname = \"Username Required*\";\n  } else if (username.length < 5) {\n    error.uname = \"Username at least 6 characters length\";\n  }\n  if (password == \"\") {\n    error.password = \"Password Required*\";\n  } else if (password.length < 8) {\n    error.password = \"Password must be at least 8 characters\";\n  }\n  return error;\n};\n_c = Validation;\nexport const otpEmailValidate = otpEmail => {\n  const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n  if (otpEmail == \"\") {\n    return \"Recovery Email is required*\";\n  } else if (!emailPattern.test(otpEmail)) {\n    return \"Email is in incorrect format\";\n  }\n};\nexport const otpMobilelValidate = otpMobile => {\n  const mobileNumberPattern = /^\\d{10}$/;\n  if (otpMobile == \"\") {\n    return \"Recovery Mobile no is required*\";\n  } else if (!mobileNumberPattern.test(otpMobile)) {\n    return \"Mobile number is in incorrect format\";\n  }\n};\nexport const validateOtp = otp => {\n  if (otp == \"\") {\n    return \"OTP code is required*\";\n  } else if (otp.length < 6) {\n    return \"OTP at least 6 digits code\";\n  }\n};\nexport const validateNewPassword = (newpassword, confirmpassword, setAlertOk) => {\n  let errors = {};\n  const passwordPattern = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\n  if (newpassword == \"\") {\n    errors.newpassword = \"New password is required*\";\n    setAlertOk(true);\n  } else if (passwordPattern.test(newpassword)) {\n    errors.newpassword = \"Please enter valid password\";\n    setAlertOk(true);\n  }\n  if (confirmpassword == \"\") {\n    errors.confirmpassword = \"Confirm password is required*\";\n  } else if (newpassword != confirmpassword) {\n    errors.confirmpassword = \"Password Confirmation is wrong\";\n  }\n  return errors;\n};\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["React","useState","Validation","username","password","error","uname","length","_c","otpEmailValidate","otpEmail","emailPattern","test","otpMobilelValidate","otpMobile","mobileNumberPattern","validateOtp","otp","validateNewPassword","newpassword","confirmpassword","setAlertOk","errors","passwordPattern","$RefreshReg$"],"sources":["/media/nipuna/SSD FILES/Git Test/Medi-Ward-Sri-Lanka/src/Pages/LoginPage/Validation.jsx"],"sourcesContent":["import React, { useState } from 'react'\n\nexport const Validation = (username,password) => {\n\n    let error={}\n\n    if(username==\"\"){\n        error.uname=\"Username Required*\"\n    }\n    else if(username.length<5){\n        error.uname=\"Username at least 6 characters length\"\n    }\n\n    if(password==\"\"){\n        error.password=\"Password Required*\"\n    }\n    else if(password.length<8){\n        error.password=\"Password must be at least 8 characters\"\n    }\n  return error;\n}\n\nexport const otpEmailValidate=(otpEmail)=>{\n\n    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n\n    if(otpEmail==\"\"){\n        return \"Recovery Email is required*\";\n    }\n    else if(!(emailPattern.test(otpEmail))){\n        return \"Email is in incorrect format\"\n    }\n}\n\nexport const otpMobilelValidate=(otpMobile)=>{\n\n    const mobileNumberPattern = /^\\d{10}$/;\n\n    if(otpMobile==\"\"){\n        return \"Recovery Mobile no is required*\";\n    }\n    else if(!(mobileNumberPattern.test(otpMobile))){\n        return \"Mobile number is in incorrect format\"\n    }\n}\n\n\nexport const validateOtp=(otp)=>{\n\n    if(otp==\"\"){\n        return \"OTP code is required*\";\n    }\n    else if(otp.length<6){\n        return \"OTP at least 6 digits code\"\n    }\n}\n\nexport const validateNewPassword=(newpassword,confirmpassword,setAlertOk)=>{\n\n    let errors={}\n    const passwordPattern = /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/;\n\n    \n\n    if(newpassword==\"\"){\n        errors.newpassword=\"New password is required*\";\n        setAlertOk(true);\n    }\n    else if(passwordPattern.test(newpassword)){\n        errors.newpassword=\"Please enter valid password\"\n        setAlertOk(true);\n    }\n\n    if(confirmpassword==\"\"){\n        errors.confirmpassword= \"Confirm password is required*\"\n    }else if(newpassword!=confirmpassword){\n        errors.confirmpassword=\"Password Confirmation is wrong\"\n    }\n\n    return errors\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAO,MAAMC,UAAU,GAAGA,CAACC,QAAQ,EAACC,QAAQ,KAAK;EAE7C,IAAIC,KAAK,GAAC,CAAC,CAAC;EAEZ,IAAGF,QAAQ,IAAE,EAAE,EAAC;IACZE,KAAK,CAACC,KAAK,GAAC,oBAAoB;EACpC,CAAC,MACI,IAAGH,QAAQ,CAACI,MAAM,GAAC,CAAC,EAAC;IACtBF,KAAK,CAACC,KAAK,GAAC,uCAAuC;EACvD;EAEA,IAAGF,QAAQ,IAAE,EAAE,EAAC;IACZC,KAAK,CAACD,QAAQ,GAAC,oBAAoB;EACvC,CAAC,MACI,IAAGA,QAAQ,CAACG,MAAM,GAAC,CAAC,EAAC;IACtBF,KAAK,CAACD,QAAQ,GAAC,wCAAwC;EAC3D;EACF,OAAOC,KAAK;AACd,CAAC;AAAAG,EAAA,GAlBYN,UAAU;AAoBvB,OAAO,MAAMO,gBAAgB,GAAEC,QAAQ,IAAG;EAEtC,MAAMC,YAAY,GAAG,iDAAiD;EAEtE,IAAGD,QAAQ,IAAE,EAAE,EAAC;IACZ,OAAO,6BAA6B;EACxC,CAAC,MACI,IAAG,CAAEC,YAAY,CAACC,IAAI,CAACF,QAAQ,CAAE,EAAC;IACnC,OAAO,8BAA8B;EACzC;AACJ,CAAC;AAED,OAAO,MAAMG,kBAAkB,GAAEC,SAAS,IAAG;EAEzC,MAAMC,mBAAmB,GAAG,UAAU;EAEtC,IAAGD,SAAS,IAAE,EAAE,EAAC;IACb,OAAO,iCAAiC;EAC5C,CAAC,MACI,IAAG,CAAEC,mBAAmB,CAACH,IAAI,CAACE,SAAS,CAAE,EAAC;IAC3C,OAAO,sCAAsC;EACjD;AACJ,CAAC;AAGD,OAAO,MAAME,WAAW,GAAEC,GAAG,IAAG;EAE5B,IAAGA,GAAG,IAAE,EAAE,EAAC;IACP,OAAO,uBAAuB;EAClC,CAAC,MACI,IAAGA,GAAG,CAACV,MAAM,GAAC,CAAC,EAAC;IACjB,OAAO,4BAA4B;EACvC;AACJ,CAAC;AAED,OAAO,MAAMW,mBAAmB,GAACA,CAACC,WAAW,EAACC,eAAe,EAACC,UAAU,KAAG;EAEvE,IAAIC,MAAM,GAAC,CAAC,CAAC;EACb,MAAMC,eAAe,GAAG,sDAAsD;EAI9E,IAAGJ,WAAW,IAAE,EAAE,EAAC;IACfG,MAAM,CAACH,WAAW,GAAC,2BAA2B;IAC9CE,UAAU,CAAC,IAAI,CAAC;EACpB,CAAC,MACI,IAAGE,eAAe,CAACX,IAAI,CAACO,WAAW,CAAC,EAAC;IACtCG,MAAM,CAACH,WAAW,GAAC,6BAA6B;IAChDE,UAAU,CAAC,IAAI,CAAC;EACpB;EAEA,IAAGD,eAAe,IAAE,EAAE,EAAC;IACnBE,MAAM,CAACF,eAAe,GAAE,+BAA+B;EAC3D,CAAC,MAAK,IAAGD,WAAW,IAAEC,eAAe,EAAC;IAClCE,MAAM,CAACF,eAAe,GAAC,gCAAgC;EAC3D;EAEA,OAAOE,MAAM;AACjB,CAAC;AAAA,IAAAd,EAAA;AAAAgB,YAAA,CAAAhB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}